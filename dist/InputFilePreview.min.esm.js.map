{"version":3,"sources":["InputFilePreview.esm.js"],"names":["_targetElement","_maxSize","_errorMessageHTML","__classPrivateFieldSet","this","receiver","privateMap","value","has","TypeError","set","__classPrivateFieldGet","get","InputFilePreview","HTMLInputElement","[object Object]","super","type","targetElementId","dataset","targetFor","undefined","Error","targetElement","document","getElementById","maxSize","Number","errorMessageHTML","errorMessage","addEventListener","_changeEvent","passive","removeEventListener","hasChildNodes","firstChild","remove","files","file","name","size","split","insertPreviewElement","tagName","toLowerCase","liElement","createElement","appendChild","includes","insertAdjacentHTML","_convertMessage","fileReader","FileReader","readAsDataURL","fileReaderResult","result","imageElement","src","alt","audioElement","controls","textContent","videoElement","message","replace","_escapeHtml","String","str","match","convertStr","Map","WeakMap"],"mappings":"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","file":"InputFilePreview.esm.js","sourcesContent":["var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to set private field on non-instance\");\n    }\n    privateMap.set(receiver, value);\n    return value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {\n    if (!privateMap.has(receiver)) {\n        throw new TypeError(\"attempted to get private field on non-instance\");\n    }\n    return privateMap.get(receiver);\n};\nvar _targetElement, _maxSize, _errorMessageHTML;\n/**\n * Show preview with file upload\n *\n * @version 1.0.0\n */\nexport default class InputFilePreview extends HTMLInputElement {\n    constructor() {\n        super();\n        _targetElement.set(this, null); // プレビューを表示する要素\n        _maxSize.set(this, 10485760); // これ以上のサイズのファイルはプレビューを行わない\n        _errorMessageHTML.set(this, void 0); // エラーメッセージの HTML 断片\n        this.type = 'file';\n    }\n    connectedCallback() {\n        const targetElementId = this.dataset.targetFor;\n        if (targetElementId === undefined) {\n            throw new Error('Attribute: `data-target-for` is not set.');\n        }\n        const targetElement = document.getElementById(targetElementId);\n        if (targetElement === null) {\n            throw new Error(`Element: #${targetElementId} can not found.`);\n        }\n        __classPrivateFieldSet(this, _targetElement, targetElement);\n        const maxSize = this.dataset.maxSize;\n        if (maxSize !== undefined) {\n            __classPrivateFieldSet(this, _maxSize, Number(maxSize));\n        }\n        const errorMessageHTML = this.dataset.errorMessage;\n        if (errorMessageHTML === undefined) {\n            throw new Error('Attribute: `data-error-message` is not set.');\n        }\n        __classPrivateFieldSet(this, _errorMessageHTML, errorMessageHTML);\n        this.addEventListener('change', this._changeEvent, { passive: true });\n    }\n    disconnectedCallback() {\n        this.removeEventListener('change', this._changeEvent);\n    }\n    /**\n     * ファイル選択時の処理\n     */\n    _changeEvent() {\n        const targetElement = __classPrivateFieldGet(this, _targetElement);\n        if (targetElement.hasChildNodes()) {\n            /* いったん空にする */\n            while (targetElement.firstChild !== null) {\n                targetElement.firstChild.remove();\n            }\n        }\n        const files = this.files;\n        if (files === null) {\n            return;\n        }\n        for (const file of files) {\n            const name = file.name;\n            const size = file.size;\n            const [type] = file.type.split('/', 2);\n            let insertPreviewElement;\n            switch (targetElement.tagName.toLowerCase()) {\n                case 'ol':\n                case 'ul': {\n                    const liElement = document.createElement('li');\n                    targetElement.appendChild(liElement);\n                    insertPreviewElement = liElement;\n                    break;\n                }\n                default: {\n                    insertPreviewElement = targetElement;\n                }\n            }\n            /* ファイルサイズ、 MIME タイプのチェック */\n            if (size > __classPrivateFieldGet(this, _maxSize) || !['image', 'audio', 'video'].includes(type)) {\n                insertPreviewElement.insertAdjacentHTML('beforeend', this._convertMessage(__classPrivateFieldGet(this, _errorMessageHTML), file));\n                continue;\n            }\n            const fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.addEventListener('load', () => {\n                const fileReaderResult = fileReader.result;\n                if (fileReaderResult === null) {\n                    throw new Error('File load failed.');\n                }\n                switch (type) {\n                    case 'image': {\n                        const imageElement = document.createElement('img');\n                        imageElement.src = fileReaderResult;\n                        imageElement.alt = name;\n                        insertPreviewElement.appendChild(imageElement);\n                        break;\n                    }\n                    case 'audio': {\n                        const audioElement = document.createElement('audio');\n                        audioElement.src = fileReaderResult;\n                        audioElement.controls = true;\n                        audioElement.textContent = name;\n                        insertPreviewElement.appendChild(audioElement);\n                        break;\n                    }\n                    case 'video': {\n                        const videoElement = document.createElement('video');\n                        videoElement.src = fileReaderResult;\n                        videoElement.controls = true;\n                        videoElement.textContent = name;\n                        insertPreviewElement.appendChild(videoElement);\n                        break;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * 画面に表示するメッセージを変換する\n     *   ${name} → ファイル名\n     *   ${size} → ファイルサイズ\n     *\n     * @param {string} message - 変換前のメッセージ\n     * @param {File} file - <input type=\"file\"/> で選択されたファイル情報\n     *\n     * @returns {string} 変換後のメッセージ\n     */\n    _convertMessage(message, file) {\n        return message.replace(/\\$\\{name\\}/g, this._escapeHtml(file.name)).replace(/\\$\\{size\\}/g, String(file.size));\n    }\n    /**\n     * 文字列を HTML エスケープする\n     *\n     * @param {string} str - 文字列\n     *\n     * @returns {string} エスケープした文字列\n     */\n    _escapeHtml(str) {\n        return str.replace(/[&<>\"']/g, (match) => {\n            const convertStr = new Map([\n                ['&', '&amp;'],\n                ['<', '&lt;'],\n                ['>', '&gt;'],\n                ['\"', '&quot;'],\n                [\"'\", '&#39;'],\n            ]).get(match);\n            return convertStr === undefined ? match : convertStr;\n        });\n    }\n}\n_targetElement = new WeakMap(), _maxSize = new WeakMap(), _errorMessageHTML = new WeakMap();\n"]}